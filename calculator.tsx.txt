import { useState } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { GradeCalculatorInput, gradeCalculatorSchema } from "@shared/schema";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent } from "@/components/ui/card";
import { Table, TableBody, TableCaption, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { useToast } from "@/hooks/use-toast";
import { calculateGrade, isPassing, semesters, streams } from "@/lib/utils";
import { useCalculateGrades } from "@/hooks/use-student";
import { Tab } from "@/App";
import { 
  RefreshCw, 
  Settings, 
  Download, 
  Save, 
} from "lucide-react";

interface CalculatorProps {
  setActiveTab: (tab: Tab) => void;
}

export default function Calculator({ setActiveTab }: CalculatorProps) {
  const [showResults, setShowResults] = useState(false);
  const { toast } = useToast();
  const calculateGradesMutation = useCalculateGrades();

  const form = useForm<GradeCalculatorInput>({
    resolver: zodResolver(gradeCalculatorSchema),
    defaultValues: {
      name: "",
      usn: "",
      className: "",
      semester: "",
      stream: "",
      subjects: [
        { name: "", marks: 0 },
        { name: "", marks: 0 },
        { name: "", marks: 0 },
        { name: "", marks: 0 },
        { name: "", marks: 0 }
      ]
    }
  });

  const { fields } = useFieldArray({
    control: form.control,
    name: "subjects"
  });

  const onSubmit = async (data: GradeCalculatorInput) => {
    try {
      await calculateGradesMutation.mutateAsync(data);
      setShowResults(true);
      toast({
        title: "Grades calculated successfully",
        description: "Your grades have been calculated and saved.",
      });
    } catch (error) {
      toast({
        title: "Failed to calculate grades",
        description: "Please check your input and try again.",
        variant: "destructive",
      });
    }
  };

  const results = calculateGradesMutation.data;
  const totalMarks = results?.summary.totalMarks || 0;
  const averageMarks = results?.summary.averageMarks || 0;
  const passCount = results?.summary.passCount || 0;
  const failCount = results?.summary.failCount || 0;
  const overallStatus = results?.summary.overallStatus || "N/A";

  return (
    <>
      {/* Header */}
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-gray-900">Grade Calculator</h1>
          <div className="flex space-x-4">
            <Button variant="default" size="sm" className="inline-flex items-center">
              <RefreshCw className="mr-2 h-4 w-4" />
              Sync Data
            </Button>
            <Button variant="outline" size="sm" className="inline-flex items-center">
              <Settings className="mr-2 h-4 w-4" />
              Settings
            </Button>
          </div>
        </div>
      </header>

      <div className="flex-1 py-6 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <Card className="shadow-md rounded-lg overflow-hidden">
            {/* Welcome banner with image */}
            <div className="relative h-48 md:h-64 overflow-hidden">
              <img 
                src="https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=400&q=80" 
                alt="Students in classroom" 
                className="w-full h-full object-cover"
              />
              <div className="absolute inset-0 bg-gradient-to-r from-primary/80 to-secondary/60"></div>
              <div className="absolute inset-0 flex items-center px-8">
                <div className="text-white">
                  <h2 className="text-2xl font-bold mb-2">Student Grade Calculator</h2>
                  <p className="text-lg opacity-90">Track, analyze and improve your academic performance</p>
                </div>
              </div>
            </div>
            
            {/* Form */}
            <CardContent className="p-6">
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Full Name</FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="Enter your full name" 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="usn"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>USN</FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="University Serial Number" 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="className"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Class</FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="Enter your class" 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="semester"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Semester</FormLabel>
                          <Select 
                            onValueChange={field.onChange} 
                            defaultValue={field.value}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select Semester" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {semesters.map(semester => (
                                <SelectItem key={semester.value} value={semester.value}>
                                  {semester.label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="stream"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Stream</FormLabel>
                          <Select 
                            onValueChange={field.onChange} 
                            defaultValue={field.value}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select Stream" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {streams.map(stream => (
                                <SelectItem key={stream.value} value={stream.value}>
                                  {stream.label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className="border-t border-gray-200 pt-6">
                    <h3 className="text-lg font-medium text-gray-900">Subject Marks</h3>
                    <p className="mt-1 text-sm text-gray-500">Enter marks for each subject (out of 100)</p>
                    
                    <div className="mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {fields.map((field, index) => (
                        <div key={field.id} className="space-y-2">
                          <FormLabel>Subject {index + 1}</FormLabel>
                          <div className="mt-1 flex rounded-md shadow-sm">
                            <FormField
                              control={form.control}
                              name={`subjects.${index}.name`}
                              render={({ field }) => (
                                <FormControl>
                                  <Input 
                                    className="flex-1 min-w-0 block w-full rounded-none rounded-l-md" 
                                    placeholder="Subject Name" 
                                    {...field} 
                                  />
                                </FormControl>
                              )}
                            />
                            <FormField
                              control={form.control}
                              name={`subjects.${index}.marks`}
                              render={({ field }) => (
                                <FormControl>
                                  <Input 
                                    className="flex-1 min-w-0 block w-full rounded-none rounded-r-md" 
                                    type="number"
                                    min={0}
                                    max={100}
                                    placeholder="Marks"
                                    {...field}
                                    onChange={e => field.onChange(parseInt(e.target.value) || 0)}
                                  />
                                </FormControl>
                              )}
                            />
                          </div>
                          <FormMessage>
                            {form.formState.errors.subjects?.[index]?.name?.message ||
                             form.formState.errors.subjects?.[index]?.marks?.message}
                          </FormMessage>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div className="flex justify-end">
                    <Button 
                      type="submit" 
                      disabled={calculateGradesMutation.isPending}
                      className="inline-flex items-center px-4 py-2 font-medium"
                    >
                      {calculateGradesMutation.isPending ? "Calculating..." : "Calculate Grades"}
                    </Button>
                  </div>
                </form>
              </Form>
            </CardContent>
          </Card>
          
          {/* Results Section */}
          {showResults && results && (
            <Card className="mt-8 shadow-md rounded-lg overflow-hidden">
              <CardContent className="p-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-4">Results</h2>
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Subject</TableHead>
                        <TableHead>Marks</TableHead>
                        <TableHead>Grade</TableHead>
                        <TableHead>Status</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {results.subjects.map((subject) => (
                        <TableRow key={subject.id}>
                          <TableCell className="font-medium">{subject.name}</TableCell>
                          <TableCell>{subject.marks}</TableCell>
                          <TableCell>{calculateGrade(subject.marks)}</TableCell>
                          <TableCell>
                            {subject.isPassing ? (
                              <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Pass</span>
                            ) : (
                              <span className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">Fail</span>
                            )}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                    <tfoot className="bg-gray-50">
                      <tr>
                        <td className="px-6 py-4 text-sm font-medium text-gray-900">Total</td>
                        <td className="px-6 py-4 text-sm font-medium text-gray-900">{totalMarks}</td>
                        <td className="px-6 py-4 text-sm font-medium text-gray-900">{calculateGrade(averageMarks)}</td>
                        <td className="px-6 py-4 text-sm font-medium text-gray-900">
                          {overallStatus === "Pass" ? (
                            <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Pass</span>
                          ) : (
                            <span className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">Fail</span>
                          )}
                        </td>
                      </tr>
                    </tfoot>
                  </Table>
                </div>
                
                <div className="mt-6 flex justify-between">
                  <Button variant="outline" className="inline-flex items-center">
                    <Save className="mr-2 h-4 w-4" />
                    Save Results
                  </Button>
                  <Button variant="default" className="inline-flex items-center">
                    <Download className="mr-2 h-4 w-4" />
                    Download PDF
                  </Button>
                </div>

                <div className="mt-6">
                  <Button 
                    variant="outline" 
                    onClick={() => setActiveTab("tracker")}
                    className="w-full"
                  >
                    Go to Visual Tracker
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </>
  );
}
